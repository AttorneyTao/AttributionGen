import yaml
from pathlib import Path
from typing import Dict

class TemplateManager:
    """Manages output templates."""
    def __init__(self, template_config_path: str = "templates.yaml"):
        self.template_config_path = Path(template_config_path)
        self.templates = self._load_templates()

    def _load_templates(self) -> Dict[str, str]:
        default_templates = {
            # Updated header to accept project_name and copyright_holder_full
            "header": "{project_name} - OPEN SOURCE SOFTWARE ATTRIBUTIONS\n" + \
                      "Copyright (C) {copyright_holder_full}. All Rights Reserved.\n" + \
                      "=" * 60, # Increased length for potentially longer lines
            "license_group_header": "Open Source Software Licensed under: {license_id}\n" + 
                                    "# Note: The software listed below may have been modified by {copyright_holder_short}.\n" + # Added short holder
                                    "--------------------------------------------------------------------",
            # Updated component_listing to include {modification_notice}
            "component_listing": "  {serial_number}. {name}\n" + \
                                 "     Copyright: {copyright}\n" + \
                                 "     Version: {version}{modification_notice}", # modification_notice will include leading newline if needed
            "license_group_footer": "\nTerms related to \"{license_id}\":\n" + 
                                    "--------------------------------------------------------------------\n" +
                                    "{license_text}", 
            "inter_license_separator": "=" * 70, 
            "footer": "=" * 60 + "\nGenerated by OSS Attribution Generator for {project_name}", # Added project name to footer
            "others_url_section_header": "\nSpecific 'Others' Notices/URLs for components in this group:",
            "others_url_item": "  {component_serial_number}. {component_name}: {others_url}"
        }
        if not self.template_config_path.exists():
            return default_templates
        try:
            with open(self.template_config_path, 'r', encoding='utf-8') as f:
                user_templates = yaml.safe_load(f)
                if isinstance(user_templates, dict):
                    return {**default_templates, **user_templates}
                else:
                    print(f"⚠️ Warning: Template config '{self.template_config_path}' is not a dict. Using defaults.")
                    return default_templates
        except Exception as e:
            print(f"⚠️ Error loading template file '{self.template_config_path}': {e}. Using defaults.")
            return default_templates

    def get_template(self, template_name: str) -> str:
        template_str = self.templates.get(template_name)
        if template_str is None:
            print(f"⚠️ Warning: Template '{template_name}' not found. Using empty string.")
            return ""
        return template_str